

plugins {
    id 'eclipse'
    id 'application'
    id 'java-library'
    id 'org.javamodularity.moduleplugin' version "1.8.12"
    id 'org.beryx.jlink' version "3.0.1"
}

repositories {
    mavenCentral()
}

mainClassName = 'Image2C.views.ImageApp'
applicationName = 'GUIslice_Image2C'
archivesBaseName = 'guislice_image2c'
project.version = '3.00'

processResources { 
     from("src/main/java/") { 
         include 'resources/**' 
     } 
}

application {
    mainClass = 'image2C.views.ImageApp'
    mainModule = 'image2C'
}

def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(18)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}

jar {
  manifest {
    attributes 'Main-Class': 'image2C.views.ImageApp',
      "Implementation-Title": 'GUIslice ImageApp',
      "Implementation-Version": archiveVersion
  }
}

jlink {
  options = ['--strip-debug', '--compress', '1', '--no-header-files', '--no-man-pages']

  targetPlatform('win-x64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18.0.2.1%2B1/OpenJDK18U-jdk_x64_windows_hotspot_18.0.2.1_1.zip')
  }
  
  targetPlatform('linux-x64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18.0.2.1%2B1/OpenJDK18U-jdk_x64_linux_hotspot_18.0.2.1_1.tar.gz')
  }
  
  targetPlatform('linux-aarch64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18.0.2.1%2B1/OpenJDK18U-jdk_aarch64_linux_hotspot_18.0.2.1_1.tar.gz')
  }
  
  targetPlatform('mac-x64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18.0.2.1%2B1/OpenJDK18U-jdk_x64_mac_hotspot_18.0.2.1_1.tar.gz')
  }
  
  targetPlatform('mac-aarch64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin18-binaries/releases/download/jdk-18.0.2.1%2B1/OpenJDK18U-jdk_aarch64_mac_hotspot_18.0.2.1_1.tar.gz')
  }
  
  launcher {
    name = 'image2c'
    noConsole = true
  }
}

def JLINK_WIN    = "$buildDir/image/Image2C-win-x64"
def TARGET_WIN   = "${buildDir}/tmp/windows/GUIslice_Image2C"

def JLINK_LINUX_X64  = "$buildDir/image/image2c-linux-x64"
def TARGET_LINUX_X64 = "${buildDir}/tmp/linux-x64/GUIslice_Image2C"

def JLINK_LINUX_AARCH64  = "$buildDir/image/image2c-linux-aarch64"
def TARGET_LINUX_AARCH64 = "${buildDir}/tmp/linux-aarch64/GUIslice_Image2C"

def JLINK_MAC_X64  = "$buildDir/image/image2c-mac-x64"
def TARGET_MAC_X64 = "${buildDir}/tmp/mac-x64/GUIslice_Image2C"

def JLINK_MAC_AARCH64  = "$buildDir/image/image2c-mac-aarch64"
def TARGET_MAC_AARCH64 = "${buildDir}/tmp/mac-aarch64/GUIslice_Image2C"

def innoSetupDir = new File("${buildDir}/innosetup")

tasks.jlink.doLast {
  copy {
      from "${projectDir}/scripts-win"
      into TARGET_WIN
  }
  copy {
      from JLINK_WIN
      into TARGET_WIN
  }

  copy {
      from "${projectDir}/scripts/image2c.sh"
      into TARGET_LINUX_X64
  }
  copy {
      from JLINK_LINUX_X64
      into TARGET_LINUX_X64
  }
  
  copy {
      from "${projectDir}/scripts/image2c.sh"
      into TARGET_LINUX_AARCH64 
  }
  copy {
      from JLINK_LINUX_AARCH64
      into TARGET_LINUX_AARCH64
  }

  copy {
      from "${projectDir}/scripts/image2c.sh"
      into TARGET_MAC_X64
  }
  copy {
      from JLINK_MAC_X64
      into TARGET_MAC_X64
  }

  copy {
      from "${projectDir}/scripts/image2c.sh"
      into TARGET_MAC_AARCH64 
  }
  copy {
      from JLINK_MAC_AARCH64
      into TARGET_MAC_AARCH64
  }

  delete innoSetupDir  
  innoSetupDir.mkdir();  

  copy {
    from("${projectDir}/scripts/setup_template.iss")
    rename("setup_template.iss", "setup.iss")
    expand([
      applicationVersion: "${project.version}",
    ])
    into(innoSetupDir)
  }
    
}


task pack_WIN(type: Zip) {
  dependsOn build, assemble
  group = "assemble"
  description = "windows package distribution"
  
  doFirst {
    copy {
      from("${projectDir}/scripts/setup_template.iss")
      rename("setup_template.iss", "setup.iss")
      expand([
        applicationVersion: "${project.version}",
      ])
      into(innoSetupDir)
    }
    
    exec {
      workingDir projectDir
      commandLine "ISCC.exe ${innoSetupDir}/setup.iss /q".split()
    }  
    delete "${innoSetupDir}/setup.iss"
  }
  from innoSetupDir
  archiveBaseName = "image2c-" + "win-x64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "zip"
  destinationDirectory = file("${buildDir}/disp")
}


task pack_LINUX_X64(type: Tar) {
  dependsOn build, assemble
  group = "assemble"
  description = "linux-x64 package distribution"
  from (TARGET_LINUX_X64) {
   excludes = ["**/*.sh", "**/bin/java"]
   fileMode 0644
  }
  from (TARGET_LINUX_X64) {
   includes = ["**/*.sh", "**/bin/java"]
   fileMode 0755
  }
  archiveBaseName = "image2c-" + "linux-x64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "tgz"
  compression = Compression.GZIP  
}

task pack_LINUX_AARCH64(type: Tar) {
  dependsOn build, assemble
  group = "assemble"
  description = "linux-aarch64 package distribution"
  from (TARGET_LINUX_AARCH64) {
   excludes = ["**/*.sh", "**/bin/java"]
   fileMode 0644
  }
  from (TARGET_LINUX_AARCH64) {
   includes = ["**/*.sh", "**/bin/java"]
   fileMode 0755
  }
  archiveBaseName = "image2c-" + "linux-aarch64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "tgz"
  compression = Compression.GZIP  
}

task pack_MAC_X64(type: Tar) {
  dependsOn build, assemble
  group = "assemble"
  description = "mac-x64 package distribution"
  from (TARGET_MAC_X64) {
   excludes = ["**/*.sh", "**/bin/java"]
   fileMode 0644
  }
  from (TARGET_MAC_X64) {
   includes = ["**/*.sh", "**/bin/java"]
   fileMode 0755
  }
  archiveBaseName = "image2c-" + "mac-x64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "tgz"
  compression = Compression.GZIP  
}

task pack_MAC_AARCH64(type: Tar) {
  dependsOn build, assemble
  group = "assemble"
  description = "mac-aarch64 package distribution"
  from (TARGET_MAC_AARCH64) {
   excludes = ["**/*.sh", "**/bin/java"]
   fileMode 0644
  }
  from (TARGET_MAC_AARCH64) {
   includes = ["**/*.sh", "**/bin/java"]
   fileMode 0755
  }
  archiveBaseName = "image2c-" + "mac-aarch64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "tgz"
  compression = Compression.GZIP  
}

task packageAll() {
  dependsOn build, assemble, pack_WIN, pack_LINUX_X64, pack_LINUX_AARCH64, pack_MAC_X64, pack_MAC_AARCH64
  group = "assemble"
  description = "package all distributions"
}

dependencies {
  implementation 'com.formdev:flatlaf:3.3'
  implementation 'com.formdev:flatlaf-intellij-themes:3.3'
} 

